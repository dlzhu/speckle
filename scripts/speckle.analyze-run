#!/usr/bin/env python

"""
Search for "TODO" and "NotImplementedError"



"""


import psana

import argparse
import numpy as np

from skbeam.core.accumulators.binned_statistic import RadialBinnedStatistic


# >>> create the datasource
parser = argparse.ArgumentParser(description='Analyze a run of xcsm9816. Use MPI!')
parser.add_argument('-r', '--run', type=int, help='run number to process')
args = parser.parse_args()

ds_string = 'exp=xcsm9816:run=%s' % args.run
print 'Processing: %s' % ds_string
ds = psana.MPIDataSource(ds_string)


# >>> detectors

# pulse
fee   = psana.Detector('FEEGasDetEnergy')
ebeam = psana.Detector('EBeam')
ipm3  = psana.Detector('XCS-IPM-03')
ipm4  = psana.Detector('XCS-IPM-04')
ipm5  = psana.Detector('XCS-IPM-05')

# cameras
cspad = None # TODO
epix  = None # TODO


# >>> summary data
cspad_sum = 
epix_sum  =
epix_acf  = 

# GEOMETRY....

# XTCAV UNITS


# -------------- helper fxns --------------------

def gasdet_energy(event):
    f = fee.get(event)
    avg = np.mean([ f.f_11_ENRC(), f.f_12_ENRC(), 
                    f.f_21_ENRC,() f.f_22_ENRC() ])
    return avg


def nom_durtn(event):
    #durtn = ebeamPkCurrBC2() / ebeamDumpCharge()
    return durtn


def xtcav_power_v_time(event):
    raise NotImplementedError()
    return


# --------------- main loop ---------------------

for ie, evt in enumerate(ds.events()):



    # TODO decide if event is a hit or not


    # shot summary data
    smldata.event({'pulse' : { 'gasdet_energy_mJ'   : gasdet_energy(event)
                               'IMP-03'             : ipm3.sum(evt)
                               'IMP-04'             : ipm4.sum(evt)
                               'IMP-05'             : ipm5.sum(evt)
                               'nominal_durtn_fs'   : nom_durtn(event)
                               'xtcav_power_v_time' : xtcav_power_v_time(event)
                               'fee_spectrum'       : 
                                }})




    # cspad analysis
    cspad_calib = cspad.calib(evt)
    cspad_sum  += cspad_calib
    cspad_lo    = 
    smldata.event({'cspad' : {'lineout'  : }})

    # epix analysis
    smldata.event({'epix' : {'lineout'  :
                             'adus'     :
                             'photons'  :
                             'contrast' :
    


                  




